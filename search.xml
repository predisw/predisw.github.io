<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Cassandra_Multi_DC_Network_config</title>
      <link href="/2018/06/21/Cassandra_Multi_DC_Network_config/"/>
      <url>/2018/06/21/Cassandra_Multi_DC_Network_config/</url>
      <content type="html"><![CDATA[<h3 id="Multi-Network-Interfaces-Using-in-Multi-DC"><a href="#Multi-Network-Interfaces-Using-in-Multi-DC" class="headerlink" title="Multi Network Interfaces Using in Multi DC"></a>Multi Network Interfaces Using in Multi DC</h3><h4 id="cassandra-yaml"><a href="#cassandra-yaml" class="headerlink" title="cassandra.yaml"></a>cassandra.yaml</h4><ol><li>In the cassandra.yaml, set the <code>listen_address</code>(for communication within the local datacenter) to the private IP address of the node, and the <code>broadcast_address</code> (for communication between datacenters)to the public address of the node.</li></ol><ol><li><p>Set the addresses of the seed nodes in the <code>cassandra.yaml</code> file to that of the public IP. Private IP are not routable between networks.</p><blockquote><p>Be sure to enable encryption and authentication when using public IPs. See <a href="https://docs.datastax.com/en/cassandra/3.0/cassandra/configuration/secureSSLNodeToNode.html" target="_blank" rel="noopener">Node-to-node</a> encryption. Another option is to use a custom VPN to have local, inter-region/ datacenter IPs.</p></blockquote></li></ol><ol><li><code>listen_on_broadcast_address: true</code>  The public address to private address routing is not automatically enabled. Enabling <code>listen_on_broadcast_address</code> allows Cassandra to listen on both <code>listen_address</code> and <code>broadcast_address</code> with two network interfaces</li></ol><h4 id="cassandra-rackdc-properties"><a href="#cassandra-rackdc-properties" class="headerlink" title="cassandra-rackdc.properties"></a>cassandra-rackdc.properties</h4><ol><li>Define the datacenter and Rack that include this node. The default settings:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dc=DC1</span><br><span class="line">rack=RAC1</span><br></pre></td></tr></table></figure></li></ol><p>Note: datacenter and rack names are case-sensitive.</p><ol><li><code>prefer_local=true</code> Enable the option <code>prefer_local</code> to ensure that traffic to broadcast_address will re-route to listen_address. And This option tells Cassandra to use the local IP address when communication is not across different datacenters</li></ol><h4 id="Case"><a href="#Case" class="headerlink" title="Case:"></a>Case:</h4><ul><li><p><strong>env:</strong></p><ul><li>dc1</li><li><p>cassandra1-1</p><ul><li>eth1:10.175.188.47</li><li>eth2:192.168.0.6</li><li>eth3:10.175.189.7</li></ul></li><li><p>dc2</p></li><li>cassandra2-1<ul><li>eth1:10.175.187.79</li><li>eth2:192.168.0.6</li><li>eth3:10.175.189.4</li></ul></li></ul></li></ul><ul><li><strong>requirement</strong><ul><li>eth1 receive traffic from application client</li><li>eth0 sync data between cassandra nodes in local data center</li><li>eth2 sync data between data center </li></ul></li></ul><ul><li><p><strong>here is the configuration for cassandra2-1 in dc2 </strong></p><ul><li><p><strong>for cassandra.yaml</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- seeds: 10.175.189.4,10.175.189.5,10.175.189.7,10.175.189.8</span><br><span class="line">listen_address: 192.168.0.6</span><br><span class="line">broadcast_address: 10.175.189.4</span><br><span class="line">listen_on_broadcast_address: true</span><br><span class="line"></span><br><span class="line">rpc_address: 0.0.0.0                  # for sake of eth1 receive traffic from application client</span><br><span class="line">broadcast_rpc_address: 10.175.187.79  # for sake of eth1 receive traffic from application client</span><br><span class="line"></span><br><span class="line">endpoint_snitch: GossipingPropertyFileSnitch</span><br></pre></td></tr></table></figure></li><li><p><strong> for cassandra-rackdc.properties</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dc=dc2</span><br><span class="line">rack=cassandra_rack</span><br><span class="line"></span><br><span class="line">prefer_local=true</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cassandra </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python_import_searching_path</title>
      <link href="/2018/06/12/python_import_searching_path/"/>
      <url>/2018/06/12/python_import_searching_path/</url>
      <content type="html"><![CDATA[<h3 id="python-import-searching-path"><a href="#python-import-searching-path" class="headerlink" title="python import searching path"></a>python import searching path</h3><ol><li>程序运行的当前目录</li><li>PYTHONPATH 环境变量的目录</li><li>标准链接库的目录</li><li>任何.pth 中的文件内容</li></ol><p>import 搜索路径默认按照上面的顺序</p><p>import 只会选择在搜索时遇到第一个匹配的文件导入</p><p>对于.pth 文件只能放在标准库所在位置sitepackages 子目录中，这个目录可以通过如下命令获取:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import site;</span><br><span class="line">&gt;&gt;&gt; site.getsitepackages()</span><br><span class="line">[&apos;/usr/local/lib/python2.7/dist-packages&apos;, &apos;/usr/lib/python2.7/dist-packages&apos;]</span><br></pre></td></tr></table></figure></p><p>可以使用 <strong>import sys;sys.path</strong>   来查看当前 import 时搜索的路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># env setting</span><br><span class="line">export PROJ_HOME=/home/predisw/proj</span><br><span class="line">export PYTHON_LEARNING_HOME=/home/predisw/proj/predisw-baseline/practice-test/python-learning/src/main/python</span><br><span class="line">export PYTHONPATH=$PROJ_HOME/forOne/extractData:$PYTHON_LEARNING_HOME</span><br><span class="line"></span><br><span class="line"># .pth setting</span><br><span class="line">cat /usr/local/lib/python2.7/dist-packages/practice.pth </span><br><span class="line">/home/predisw/proj/predisw-baseline/practice-test/python-learning/src/main/python/predisw/moduleT</span><br><span class="line"></span><br><span class="line"># check import searching path</span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&apos;&apos;, &apos;/home/predisw/proj/forOne/extractData&apos;, &apos;/home/predisw/proj/predisw-baseline/practice-test/python-learning/src/main/python&apos;, &apos;/usr/lib/python2.7&apos;, &apos;/usr/lib/python2.7/plat-x86_64-linux-gnu&apos;, &apos;/usr/lib/python2.7/lib-tk&apos;, &apos;/usr/lib/python2.7/lib-old&apos;, &apos;/usr/lib/python2.7/lib-dynload&apos;, &apos;/usr/local/lib/python2.7/dist-packages&apos;, &apos;/usr/local/lib/python2.7/dist-packages/setuptools-28.8.0-py2.7.egg&apos;, &apos;/home/predisw/proj/predisw-baseline/practice-test/python-learning/src/main/python/predisw/moduleT&apos;, &apos;/usr/lib/python2.7/dist-packages&apos;]</span><br></pre></td></tr></table></figure></p><p>其中’’ 空字符串表示当前工作目录</p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>primaryKey_And_where_clause</title>
      <link href="/2018/06/08/primaryKey_And_where_clause/"/>
      <url>/2018/06/08/primaryKey_And_where_clause/</url>
      <content type="html"><![CDATA[<p>primary key And Where clause</p><h3 id="primary-key-And-partition-key"><a href="#primary-key-And-partition-key" class="headerlink" title="primary key And partition key"></a>primary key And partition key</h3><p>primary key consist of partition key which is the first component and clustering key which is the other components of primary key.</p><p><code>partition key</code>  ：由一个或多个column 组成，决定partition</p><p><code>clustering key</code> (clustering columns): 由一个或多个column 组成，决定数据在partition 内的排序，默认按照字母表排序 </p><p>The first component of a table’s primary key is the partition key; within a partition, rows are clustered by the remaining columns of the key. Other columns can be indexed separately from the primary key.<br>Clustering is a storage engine process that sorts data within each partition based on the definition of the clustering columns. </p><p>Cassandra stores an entire row of data on a node by partition key and can order the data for retrieval with clustering columns.</p><p><strong> Keep in mind that only the primary key can be specified when retrieving data from the table. </strong></p><p><strong> Data is retrieved using the partition key. Keep in mind that to retrieve data from the table, values for all columns defined in the partition key have to be supplied.</strong></p><p>The table shown uses race_year and race_name in the primary key, as a composition partition key. To retrieve data, both parameters must be identified.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cqlsh&gt; CREATE TABLE cycling.rank_by_year_and_name ( </span><br><span class="line">  race_year int, </span><br><span class="line">  race_name text, </span><br><span class="line">  cyclist_name text, </span><br><span class="line">  rank int, </span><br><span class="line">  PRIMARY KEY ((race_year, race_name), rank) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>Both <code>race_year</code> and <code>race_name</code>  comprise the partition key.<br>rank is the clustering key</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cqlsh&gt; SELECT * FROM cycling.rank_by_year_and_name WHERE race_year=2015;</span><br></pre></td></tr></table></figure><p>上面这句执行会报错，因为条件语句只使用了部分 partition key.<br>但如果给race_year 创建索引，就可以正确查询。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cqlsh&gt; CREATE INDEX ryear ON cycling.rank_by_year_and_name (race_year);</span><br><span class="line">SELECT * FROM cycling.rank_by_year_and_name WHERE race_year=2015;</span><br></pre></td></tr></table></figure></p><p>clustering key 也可以创建索引<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cqlsh&gt; CREATE INDEX rrank ON cycling.rank_by_year_and_name (rank);</span><br><span class="line">SELECT * FROM cycling.rank_by_year_and_name WHERE rank = 1;</span><br></pre></td></tr></table></figure></p><p><strong> Both partition key and clustering key can be indexed. </strong></p><h3 id="Why-have-to-add-primary-key-in-where-clause"><a href="#Why-have-to-add-primary-key-in-where-clause" class="headerlink" title="Why have to add primary key in where clause ?"></a>Why have to add primary key in where clause ?</h3><p>这个和cassandra 的存储数据的实现机制有关。<br>当插入一条数据的时候，Partitioner 先根据 partition key 的hash code 给它分配parttion（就是哪个virtual node，或者哪一段token），然后再根据这条数据的 clustering columns 的值给它在partition 内排序。这样就决定了这条数据存储的位置。</p><p>当使用select 语句去定位一条数据的时候， 就必须先指定这条数据的partition key 去确定这条数据是在哪个partition。所以在select 语句中，partition key 条件必须要用 等号（=）来确定。然后clustering columns 部分可以使用 =，&gt;,&lt; 的比较符号进行比较，或者使用order by 进去排序。</p><p>如果在select 语句中不使用partition key ，只用 clustering clounms 来做条件查询，那么就会报如下的错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table if not exists test.monitor_event_group(</span><br><span class="line">globalId        uuid,</span><br><span class="line">currentTime     timestamp,</span><br><span class="line">zoneId          int,</span><br><span class="line">groupId         varchar,</span><br><span class="line">data            text,</span><br><span class="line">PRIMARY KEY (globalId, currentTime)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">scef@cqlsh:test&gt;  SELECT *  from test.monitor_event_group where currentTime &gt; &apos;2018-06-08 05:40:00.000 +0000&apos; and currentTime&lt; &apos;2018-06-08 05:42:00.000 +0000&apos;;</span><br><span class="line"></span><br><span class="line">InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING&quot;</span><br></pre></td></tr></table></figure></p><p>就是必须使用 ALLOW FILTERING.</p><p><code>ALLOW FILTERING</code> 的意思是指 允许cassandra 扫描所有partition 去过滤出符合条件的数据，这样当然会非常没有效率和高延迟。</p><p>另外一个解决方法 是给 currentTime 这个column 创建index。This is due to the fact that Cassandra can use the secondary index on the currentTime column to find the matching rows and does not need to perform any filtering.</p><p>References:</p><p><a href="https://docs.datastax.com/en/dse/6.0/cql/cql/cql_using/wherePK.html" target="_blank" rel="noopener">Partition keys</a><br><a href="https://www.datastax.com/dev/blog/allow-filtering-explained-2" target="_blank" rel="noopener">ALLOW FILTERING explained</a></p>]]></content>
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cassandra </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cassandra_Commands</title>
      <link href="/2018/05/15/Cassandra_Commands/"/>
      <url>/2018/05/15/Cassandra_Commands/</url>
      <content type="html"><![CDATA[<h3 id="Cassandra-Commands"><a href="#Cassandra-Commands" class="headerlink" title="Cassandra Commands"></a>Cassandra Commands</h3><ul><li><code>nodetool decommission</code>  This will remove the node from cluster when node is runnig in cluster.<br>This assigns the ranges that the node was responsible for to other nodes and replicates the data appropriately.<br>If you want to restore this node ,you need to remove all data and add as one new node.Check below:</li></ul><blockquote><p>Fatal configuration error; unable to start server.  See log for stacktrace.<br>ERROR [main] 2018-04-18 16:34:04,674 CassandraDaemon.java:706 - Fatal configuration error<br>org.apache.cassandra.exceptions.ConfigurationException: This node was decommissioned and will not rejoin the ring unless cassandra.override_decommission=true has been set, or all existing data is removed and the node is bootstrapped again</p></blockquote><ul><li><code>nodetool removenode</code> This can help to remove one shutdown node from cluster.<br>Once the node has been removed from the cluster they can only be added back to cluster by adding as one new node.<br>Or any node which has been removed all data can only be added as one new node to the cluster.</li></ul><ul><li><p><code>nodetool repair</code><br>Full repair (default) compares all replicas of the data stored on the node where the command runs and updates each replica to the newest version</p></li><li><p><code>node rebuild</code>  Stream data from other data replicated source to local node.This command operates on multiple nodes in a cluster.<br>such as <code>node rebuild dc1</code> </p></li></ul><blockquote><p>CAUTION:<br>If you don’t specify the existing datacenter in the command line, the new nodes will appear to rebuild successfully, but will not contain any data.<br>If you miss this step, requests to the new datacenter with LOCAL_ONE or ONE consistency levels may fail if the existing datacenters are not completely in-sync.</p></blockquote><ul><li><p><code>nodetool netstats</code><br>for example:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[eceuser@cassandra-2 ~]$ nodetool netstats</span><br><span class="line">Mode: NORMAL</span><br><span class="line">Rebuild ffbc4870-5401-11e8-b3a1-91a4c568f9bc</span><br><span class="line">    /10.175.188.47</span><br><span class="line">        Receiving 34 files, 964651119 bytes total. Already received 18 files, 1279792 bytes total</span><br><span class="line">            system_distributed/repair_history 7694/7694 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            system_auth/resource_role_permissons_index 905/905 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/service_capability 249/249 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            system_distributed/parent_repair_history 1174931/1174931 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/application 88/88 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/niddconfig_mv_1 15336/15336 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/niddconfig 14698/14698 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/application_capability_sub 556/556 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            timer_service/table_schema 40/40 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            system_distributed/view_build_status 223/223 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/partner_capability_sub 383/383 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/epsbearercontext_mv 297/297 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/niddconfig_mv_2 14266/14266 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/niddmtsession_mv 48914/48914 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            system_auth/role_permissions 524/524 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/partner 59/59 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            system_auth/roles 331/331 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">            scef/epsbearercontext 298/298 bytes(100%) received from idx:0/10.175.188.47</span><br><span class="line">Read Repair Statistics:</span><br><span class="line">Attempted: 96416</span><br><span class="line">Mismatch (Blocking): 0</span><br><span class="line">Mismatch (Background): 0</span><br><span class="line">Pool Name                    Active   Pending      Completed   Dropped</span><br><span class="line">Large messages                  n/a         0            122         1</span><br><span class="line">Small messages                  n/a         0        2733993         1</span><br><span class="line">Gossip messages                 n/a         0         245631         1</span><br></pre></td></tr></table></figure></li><li><p><code>tracing on</code> to record one statement executing process in cqlsh console</p></li><li><p><code>nodetool clearsnapshot</code>  clean the snapshot which for example is generated by truncate.<br>  such as nodetool clearsnapshot scef</p></li></ul>]]></content>
      
      <categories>
          
          <category> db </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cassandra </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Date_Time_Format_In_Java</title>
      <link href="/2018/04/21/Date_Time_Format_In_Java/"/>
      <url>/2018/04/21/Date_Time_Format_In_Java/</url>
      <content type="html"><![CDATA[<h3 id="Date-Time-Format-in-Java"><a href="#Date-Time-Format-in-Java" class="headerlink" title="Date Time Format in Java"></a>Date Time Format in Java</h3><p>Before Java8 we always use SimpleDateFormat to format Datetime. What we should take caution is :</p><ol><li>Never use this kind of object as static</li><li><p>the String Pattern of SimpleDateFormat adapts to Least Match Principle ,it means:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SimpleDateFormatT</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">    SimpleDateFormat sd = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">    <span class="comment">//sd.applyPattern("yyyy-MM-DD HH:mm:ss X"); // can not parse the string without timeZone info</span></span><br><span class="line"></span><br><span class="line">    sd.applyPattern(<span class="string">"yyyy-MM-DD HH:mm:ss"</span>);  <span class="comment">// can parse the string with timeZone info</span></span><br><span class="line"></span><br><span class="line">    String timeStr_noTZ = <span class="string">"2018-09-01 23:32:10"</span>;</span><br><span class="line">    String timeStr_TZ07 = <span class="string">"2018-09-01 23:32:10 +07:00"</span>;</span><br><span class="line">    String timeStr_TZ09 = <span class="string">"2018-09-01 23:32:10 +09:00"</span>;</span><br><span class="line"></span><br><span class="line">    Date time_noTZ = sd.parse(timeStr_noTZ); </span><br><span class="line">    Date time_TZ07 = sd.parse(timeStr_TZ07); <span class="comment">// it doesn't throw exception ,but it ignore the timezone info </span></span><br><span class="line">    Date time_TZ09 = sd.parse(timeStr_TZ09); <span class="comment">// as the string pattern doesn't specify the timezone required.</span></span><br><span class="line"></span><br><span class="line">    Assert.assertTrue(time_noTZ.compareTo(time_TZ07) == <span class="number">0</span>);</span><br><span class="line">    Assert.assertTrue(time_TZ07.equals(time_TZ09));</span><br><span class="line"></span><br><span class="line">    System.out.println(time_noTZ);</span><br><span class="line">    System.out.println(time_TZ07);</span><br><span class="line">    System.out.println(time_TZ09);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>the object of <code>java.util.Date</code> is a time value from <code>1970-01-01 00:00:00 +00:00</code>,the unit of value is millisecond.So it is a timezone-non-related value which any timezone datetime can translate into <code>java.unit.Date</code> kind of Object and compare.<br>Below is the explanation of the <code>java.util.Date</code>  constructor from JDK.</p></li></ol><blockquote><p>public Date(long date)</p><p>Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as “the epoch”, namely January 1, 1970, 00:00:00 GMT.</p></blockquote><p>Now let us start to travel around the java8’s dateTime world.</p><p>the design thought of java8 time api</p><p>learn by referring to <a href="https://zhuanlan.zhihu.com/p/28133858" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28133858</a></p><p><code>LocalDateTime</code><br>This class does not store or represent a time-zone. Instead, it is a description of the date, as used for birthdays, combined with the local time as seen on a wall clock. It cannot represent an instant on the time-line without additional information such as an offset or time-zone.</p><p><strong> example to format datetime </strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTimeConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateFormatConverter</span><span class="params">(<span class="keyword">long</span> dateLong)</span> </span>&#123;</span><br><span class="line">        OffsetDateTime duration = OffsetDateTime.ofInstant(Instant.ofEpochMilli(dateLong), ZoneId.systemDefault());</span><br><span class="line">        <span class="keyword">return</span> duration.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getDateTime</span><span class="params">(String dateString)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        OffsetDateTime duration = OffsetDateTime.parse(dateString, DateTimeFormatter.ISO_OFFSET_DATE_TIME);</span><br><span class="line">        <span class="keyword">return</span> duration.toInstant().toEpochMilli();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>coding_guidline</title>
      <link href="/2018/04/19/coding_guidline/"/>
      <url>/2018/04/19/coding_guidline/</url>
      <content type="html"><![CDATA[<h1 id="coding-guideline"><a href="#coding-guideline" class="headerlink" title="coding guideline"></a>coding guideline</h1><h3 id="Part-one-–-code-format-style"><a href="#Part-one-–-code-format-style" class="headerlink" title="Part one – code format style"></a>Part one – code format style</h3><blockquote><p>Test enviroment is IntelliJ IDEA 17.3</p></blockquote><p>Use <code>google code style</code> to unify coding style.Check the google code style project from <a href="https://github.com/google/styleguide" target="_blank" rel="noopener">https://github.com/google/styleguide</a><br>For idea we can import <code>intellij-java-google-style.xml</code><br>For eclipse need to use <code>eclipse-java-google-style.xml</code> </p><p>Can try plugin <code>eclipse code formatter</code> if want to use the <code>eclipse-java-google-style.xml</code> in idea. But after testing , the effect using <code>eclipse-java-google-style.xml</code>  in <code>eclipse code formatter</code> is different with using  <code>intellij-java-google-style.xml</code> directly in idea.</p><p>So just suggest to use by each in different IDE.</p><p>But before we start to use the <code>intellij-java-google-style.xml</code>, we need to change some settings to comply with our custom.</p><ul><li><code>indent = 2</code> in default to <code>indent = 4</code>  in custom</li><li><code>tab = 2</code> in default to <code>tab = 4</code>  in custom</li><li><code>line length = 100</code> in default to <code>line length = 120</code>  in custom</li></ul><p>Import the <code>intellij-java-google-style.xml</code> by settings -&gt; Editor -&gt; Code Style -&gt; Java -&gt; Scheme.<br>After that we can use Ctrl + Alt + L to format the code</p><h3 id="Part-two-–-coding-guideline"><a href="#Part-two-–-coding-guideline" class="headerlink" title="Part two – coding guideline"></a>Part two – coding guideline</h3><p>Install plugin – alibaba java coding guidelines<br>The plugin will detect the breaking rule codes automatically.<br>But the flaw is that it can only work on maven source codes but not the test.</p><p>And the rules the plugin will comply with can disable/enable by settings -&gt; Editor -&gt; Inspections -&gt; Ali-Check.</p><p>The more details about rules/guidelines described in document can refer to  <a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">https://github.com/alibaba/p3c</a>.<br>Here below are some of the rules/guidelines in chinese:</p><h3 id="编程规约"><a href="#编程规约" class="headerlink" title="编程规约"></a>编程规约</h3><p>【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯</p><p>【推荐】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p><p>【推荐】线程池不允许使用 Executors 去创建，而是通过ThreadPoolExecutor的方去创建 ,因为这样可以更加明白线程池的工作方式，设置线程名，和避免资源耗尽问题。如线程缓存队列允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM 。</p><p>【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁。<br>亦推荐如下处理:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>说明：如果是JDK8的应用，可以使用Instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p><p>【说明】子线程抛出异常堆栈，不能在主线程 try-catch 到</p><p>【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。<br>说明： Random 实例包括 java.util.Random 的实例或者 Math.random()的方式。<br>正例： 在 JDK7 之后，可以直接使用 API ThreadLocalRandom， 而在 JDK7 之前， 需要编码保证每个线程持有一个实例</p><p>【推荐】表达异常的分支时，少用if-else方式，这种方式可以改写成：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接着写else的业务逻辑代码;</span></span><br></pre></td></tr></table></figure></p><p>说明：如果非得使用if()…else if()…else…方式表达逻辑，【强制】避免后续代码维护困难，请勿超过3层。<br>正例：超过3层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">today</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isBusy()) &#123;</span><br><span class="line">        System.out.println(“change time.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFree()) &#123;</span><br><span class="line">        System.out.println(“go to travel.”);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(“stay at home to learn Alibaba Java Coding Guidelines.”);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【强制】类、类属性、类方法的注释必须使用Javadoc规范，使用/*<em>内容</em>/格式，不得使用// xxx方式。<br>    说明：在IDE编辑窗口中，Javadoc方式会提示相关注释，生成Javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><p>【强制】所有的抽象方法（包括接口中的方法）必须要用Javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。     说明：对子类的实现要求，或者调用注意事项，请一并说明。</p><p>【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</p><p>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。<br>    说明：例如输入参数错误，这种是无法处理的，将其抛出；如连接超时异常，可以尝试重新发送。</p><p>【强制】不要在 finally块中使用 return。<br>说明： finally块中的 return返回后方法结束执行，不会再执行try块中的 return语句。</p><p>【参考】对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess()方法、“错误码”、“错误简短信息”。<br>    说明：关于RPC方法返回方式使用Result方式的理由：</p><pre><code>- 使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 - 如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。</code></pre><h3 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h3><p>【强制】对trace/debug/info级别的日志输出，必须使用条件输出形式或者使用占位符的方式。<br>    说明：logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol); 如果日志级别是warn，上述日志不会打印，但是会执行字符串拼接操作，如果symbol是对象，会执行toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 </p><pre><code>正例：（条件）if (logger.isDebugEnabled()) {    logger.debug(&quot;Processing trade with id: &quot; + id + &quot; and symbol: &quot; + symbol);}正例：（占位符）logger.debug(&quot;Processing trade with id: {} and symbol : {} &quot;, id, symbol);</code></pre><p>【推荐】谨慎地记录日志。生产环境禁止输出debug日志；有选择地输出info日志；一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志。<br>    说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>【推荐】编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量。<br>B：Border，边界值测试，包括循环、 特殊取，边界值测试包括循环、 特殊取特殊时间点、数据顺序等。 C：Correct，正确的输入，并得到预期结果。 ，正确的输入并得到预期结果。<br>D：Design，与设计文档相结合，来编写单元测试。 ，与设计文档相结合来编写单元测试。 E：Error，强制错误信息输入（如：非法数据、异常流程业务允许等），并得到预期结果。</p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> best_practice </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>singleton-pattern-and-lazy-initialization</title>
      <link href="/2018/03/25/singleton_pattern_and_lazy_initialization/"/>
      <url>/2018/03/25/singleton_pattern_and_lazy_initialization/</url>
      <content type="html"><![CDATA[<p>单例模式 的实现方式之一：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = new Singleton();</span><br><span class="line">    private Singleton()&#123;</span><br><span class="line">        System.out.println(&quot;Singleton is instantiated&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么很多人不推荐这种实现方式？认为会在<code>类加载的时候就实例化 instance 了</code>。<br><strong>但是如果只是在其他类里声明这个类，构造函数里的字符串是不会被打印的。</strong>如<code>Singleton singleton  = null;</code>类在被声明的时候肯定是被Classloader 加载了。<br><a id="more"></a></p><p><strong><em>那如果是这样的话，什么才是lazy initialization ? 好处是什么呢？</em></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton is instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLazyInitialization</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Singleton.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">Singleton is instantiated</span><br><span class="line"><span class="keyword">do</span> something</span><br></pre></td></tr></table></figure><p>假如在<code>Singleton</code> 类加多一个其他的静态方法，当这个静态方法被调用时，就会触发<code>Singleton</code> 的静态域的初始化，这时就会实例化<code>instance</code> 了，但是这个<code>instance</code>实际是不需要的，因而这样就创建了一个无用的实例，消耗了资源。</p><p>这个时候就需要使用到lazy initialization 的技术，这样就只有需要的时候才会实例化，而不会受其他因素而触发实例化。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private Singleton()&#123;</span><br><span class="line">        System.out.println(&quot;Singleton is instantiated&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private static class SingletonHolder&#123;</span><br><span class="line">        private static Singleton instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        return SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void doSomething()&#123;</span><br><span class="line">        System.out.println(&quot;do something&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里使用到的是<code>Initialization-on-demand holder idiom</code> 这种技术，参看<a href="https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom" target="_blank" rel="noopener">Initialization-on-demand holder idiom</a></p><p>如果需要lazy initialization 的域是<strong>非静态</strong>的，也就是实例域的话可以使用<code>double-check locking</code> 这种技术，但是这种技术需要给实例域加上 <code>volatile</code> 这个修饰符，以避免不可见的问题。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile Singleton instance;</span><br><span class="line">    private Singleton()&#123;&#125;;</span><br><span class="line">    public Singleton getInstance() &#123;</span><br><span class="line">        if(instance == null)&#123;  // A</span><br><span class="line">            synchronized (this)&#123;</span><br><span class="line">                if(instance == null)&#123; // double check</span><br><span class="line">                    return new Singleton(); // B</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>volatile</code> 这里的作用是避免：当thread1 在B 步骤创建Singleton 还没完成时，thread2  在A 步骤却已经看到instance 非null 了，然后返回了一个没有创建完毕的对象，然后调用时出错。</p><p><strong>结论:</strong><br>如果没有必要延时初始化，就用eager initialization 的方法实现单例就好。</p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> design_pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AOP-learning</title>
      <link href="/2018/03/25/AOP_learning/"/>
      <url>/2018/03/25/AOP_learning/</url>
      <content type="html"><![CDATA[<h2 id="Limitations-of-Spring-Aop"><a href="#Limitations-of-Spring-Aop" class="headerlink" title="Limitations of Spring Aop:"></a>Limitations of Spring Aop:</h2><ul><li>it can only be applied to beans that are managed by a Spring container.</li><li>Can not advise static methods</li><li>Can only advise non-private methods</li><li>Can only apply aspects to Spring Beans</li><li>When using Spring Aop , suppose method a() calls method b() on the same class/interface, advice will never be executed for method b()</li></ul><h3 id="Because-of"><a href="#Because-of" class="headerlink" title="Because of:"></a>Because of:</h3><p>Spring AOP is a proxy-based AOP framework. This means that to implement aspects to the target objects, it’ll create proxies of that object. This is achieved using either of two ways:</p><ol><li>JDK dynamic proxy – the preferred way for Spring AOP. Whenever the targeted object implements even one interface, then JDK dynamic proxy will be used</li><li>CGLIB proxy – if the target object doesn’t implement an interface, then CGLIB proxy can be used</li></ol><p>We cannot apply cross-cutting concerns (or aspects) across classes that are “final” because they cannot be overridden and thus it would result in a runtime exception.<br>The same applies for static and final methods. Spring aspects cannot be applied to them because they cannot be overridden. </p><p>spring aop isn’t applied to the method called within the same class.That’s obviously because when we call a method within the same class, then we aren’t calling the method of the proxy that Spring AOP supplies.<br><a id="more"></a></p><h2 id="What-are-the-supported-AspectJ-pointcut-designators-in-Spring-AOP"><a href="#What-are-the-supported-AspectJ-pointcut-designators-in-Spring-AOP" class="headerlink" title="What are the supported AspectJ pointcut designators in Spring AOP?"></a>What are the supported AspectJ pointcut designators in Spring AOP?</h2><p>Execution<br>This<br>Target<br>Args<br>@target<br>@args<br>@within<br>@annotation</p><h3 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxLogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.ericsson.sep.scef.common.http.HttpHelper.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCutEnable</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"pointCutEnable() &amp;&amp; @annotation(txLog)"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAfterThrowException</span><span class="params">(JoinPoint jp, Exception ex, TxLog txLog)</span></span>&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution (* com.ericsson.sep.scef.monitor..*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicEndPointMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//pointcut</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"publicEndPointMethod() &amp;&amp; @annotation(uplinkLog)"</span>,returning = <span class="string">"results"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterEndPointReturn</span><span class="params">(UplinkLog uplinkLog,Map&lt;Long, MonitorEventReportResult&gt; results)</span> </span>&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ:"></a>AspectJ:</h3><p>AspectJ is the original AOP technology which aims to provide complete AOP solution. It is more robust but also significantly more complicated than Spring AOP. It’s also worth noting that AspectJ can be applied across all domain objects.<br>However, to use AspectJ, we’re required to introduce the AspectJ compiler (ajc) and re-package all our libraries (unless we switch to post-compile or load-time weaving).</p><p><a href="http://www.baeldung.com/spring-aop-vs-aspectj" target="_blank" rel="noopener">Comparing Spring AOP and AspectJ</a></p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>build-blog-with-hexo</title>
      <link href="/2018/03/25/build_blog_with_hexo/"/>
      <url>/2018/03/25/build_blog_with_hexo/</url>
      <content type="html"><![CDATA[<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><ol><li>hexo依赖</li></ol><ul><li>安装git 和准备github 帐号</li><li>安装Node.js<br>node.js 是hexo运行的基础,github 是部署存放blog内容的主机平台.<br>注意,hexo部署blog内容到github 是通过ssh,所以需要在github 上添加ssh-key.<br>方法参考: <a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Generating SSH keys</a></li></ul><ol><li>install hexo<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli  #npm 全称是Node Package Manager</span><br><span class="line">$ hexo init &lt;folder&gt;  #folder 是存放blog 的地方</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ol><p>参考: <a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">Hexo Docs</a></p><a id="more"></a><h3 id="build-blog"><a href="#build-blog" class="headerlink" title="build blog"></a>build blog</h3><ol><li>写blog文章<br><code>hexo new &quot;标题&quot;</code>    <strong><em>会在source/_posts中生产一个同名.md文件</em></strong></li><li>生成html静态文件<br><code>hexo generate</code> 或者是 <code>hexo g</code>     <strong><em>会生成静态文件到public 文件夹</em></strong></li><li>启动本地blog服务器<br><code>hexo server</code> 或 <code>hexo s</code>    <strong><em>在浏览器输入localhost:4000 就可以看到public文件夹内容</em></strong><br><code>hexo s -o</code>    <em>自动在浏览器中打开静态html页面`</em></li><li>部署到github<br><code>hexo deploy</code> 或者 <code>hexo d</code>  <strong><em><code>hexo d -g</code> 或者 <code>hexo g -d</code>  都会自动重新生成静态文件并部署</em></strong><br>部署的过程是将public 文件夹的内容复制到.deploy_git ,再将.deploy_git 的内容上传到github.</li><li>更换主题<br>可以下载主题到themes文件夹内,使用说明要参考不同的主题.<br>比较漂亮的主题有:<br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next</a><br><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></li></ol><h3 id="命令的理解"><a href="#命令的理解" class="headerlink" title="命令的理解"></a>命令的理解</h3><ul><li><p><code>hexo clean</code><br>会清理db.json 和public 文件夹的静态文件.有时候如果修改了没生效,可以清除了重新生产静态文件.</p></li><li><p><code>hexo server</code><br>启动本地服务器,加载public 中的内容,如果source/_posts 文件有修改会自动加载修改.<br>but,实际测试自动侦测和加载修改部分会很慢,还不如取消自动侦测文件的变化:<br><code>hexo server -s</code> 这个命令表示server只加载public文件夹内容,而不侦测文件的修改.<br>实际但我们想要看修改的内容是,可以手动更新: <code>hexo g</code></p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>URL静态化</strong></p><p>Hexo 默认 URL 地址为year/month/day/title/形式，而这种形式并不友好，我将之更改为year/month/title.html形式，_config.yml配置如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title.html</span></span><br></pre></td></tr></table></figure></p><p><strong>去除代码块行号</strong></p><p>修改<code>_config.yml</code>配置项如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line_number: false</span><br></pre></td></tr></table></figure></p><h3 id="主题-yilia"><a href="#主题-yilia" class="headerlink" title="主题 yilia"></a>主题 yilia</h3><p><strong>yilia 博客文章部分展示效果</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在source/_posts/ 中的.md 里添加 &lt;!--more--&gt;， 只有在 &lt;!--more--&gt; 之前的内容才会显示，其余隐藏</span><br></pre></td></tr></table></figure></p><p><br></p><p>参考: <a href="https://www.fanhaobai.com/2017/03/install-hexo.html" target="_blank" rel="noopener">启用Hexo开源博客系统</a></p>]]></content>
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
